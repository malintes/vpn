#!/bin/bash
# Malintes
# 

#############################
#############################
# Variables (Can be changed depends on your preferred values)
# Script name
MyScriptName='Malintes-VPS'
MYIP=$(wget -qO- eth0.me);
MYIP2="s/xxxxxxxxx/$MYIP/g";

# OpenSSH Ports
SSH_Port1='2205'
SSH_Port2='2206'


# Dropbear Ports
Dropbear_Port1='442'
Dropbear_Port2='110'

# Stunnel Ports
Stunnel_Port1='443' # through Dropbear
Stunnel_Port2='444' # through OpenSSH

# OpenVPN Ports
OpenVPN_TCP_Port='10001'
OpenVPN_UDP_Port='10002'

# Privoxy Ports
Privoxy_Port1='9000'
Privoxy_Port2='9999'

# Squid Ports
Squid_Port1='3128'
Squid_Port2='8080'
Squid_Port3='8000'

# OpenVPN Config Download Port
OvpnDownload_Port='8580' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/raw/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Europe/Zurich'
#############################

# Install curl & wget
apt-get install wget -y
apt-get install curl -y

#Install Iptables Rules
apt-get install netfilter-persistent -y

#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

function InstUpdates(){
 export DEBIAN_FRONTEND=noninteractive
 apt update -y
 apt upgrade -y
 apt-get update -y
 apt-get upgrade -y

# Install Ssl & Certificates
 apt install ssl-cert -y
 apt install ca-certificates -y

 # Removing some firewall tools that may affect other services
 apt-get remove --purge ufw firewalld -y
 apt-get remove --purge exim4 -y
 
 # Installing some important machine essentials
 apt-get install nano -y
 apt-get install zip -y
 apt-get install unzip -y
 apt-get install tar -y
 apt-get install gzip -y
 apt-get install p7zip-full -y
 apt-get install bc -y
 apt-get install rc -y
 apt-get install openssl -y
 apt-get install cron -y
 apt-get install net-tools -y
 apt-get install dnsutils -y
 apt-get install dos2unix -y
 apt-get install screen -y
 apt-get install bzip2 -y
 apt-get install ccrypt -y
 
 # Now installing all our wanted services
 apt-get install dropbear -y
 apt-get install stunnel4 -y
 apt-get install privoxy -y
 apt-get install ca-certificates -y
 apt-get install nginx -y
 apt-get install ruby -y
 apt-get install apt-transport-https -y
 apt-get install lsb-release -y
 apt-get install squid3 -y
 apt-get install squid -y
 
 # Installing all required packages to install Webmin
 apt-get install perl -y
 apt-get install libnet-ssleay-perl -y
 apt-get install openssl -y
 apt-get install libauthen-pam-perl -y
 apt-get install libpam-runtime -y
 apt-get install libio-pty-perl -y
 apt-get install apt-show-versions -y
 apt-get install python -y
 apt-get install dbus -y
 apt-get install libxml-parser-perl -y
 apt-get install shared-mime-info -y
 apt-get install jq -y
 apt-get install fail2ban -y

 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y

 # go to root
 cd

# Edit file /etc/systemd/system/rc-local.service
cat > /etc/systemd/system/rc-local.service <<-END
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
END

# nano /etc/rc.local
cat > /etc/rc.local <<-END
#!/bin/sh -e
# rc.local
# By default this script does nothing.
exit 0
END

# Change Permission Access
chmod +x /etc/rc.local

# enable rc local
systemctl enable rc-local

systemctl start rc-local.service

# disable ipv6
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/openvpn.list
 wget -qO - http://build.openvpn.net/debian/openvpn/stable/pubkey.gpg|apt-key add -
 apt-get update -y
 apt-get install openvpn -y
}

function InstWebmin(){
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 apt-get install apt-transport-https -y
 apt-get install gnupg2 -y
 apt-get install curl -y
 sudo echo "deb https://download.webmin.com/download/repository sarge contrib" \ > /etc/apt/sources.list.d/webmin.list
 curl https://download.webmin.com/jcameron-key.asc | sudo apt-key add -
 
 # Installing .deb package for webmin
 apt-get update -y
 apt-get install webmin -y
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
}

function InstSSH(){
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config


 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Zurich/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c
MyStunnelC

# setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'myOpenVPNconf' > /etc/openvpn/server_tcp.conf
# OpenVPN TCP
port OVPNTCP
proto tcp
dev tun
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh2048.pem
verify-client-cert none
username-as-common-name
key-direction 0
plugin /etc/openvpn/plugins/openvpn-plugin-auth-pam.so login
server 10.10.0.0 255.255.0.0
ifconfig-pool-persist ipp.txt
push "route-method exe"
push "route-delay 2"
keepalive 10 120
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
log tcp.log
verb 2
ncp-disable
cipher none
auth none
myOpenVPNconf

cat <<'myOpenVPNconf2' > /etc/openvpn/server_udp.conf
# OpenVPN UDP
port OVPNUDP
proto udp
dev tun
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh2048.pem
verify-client-cert none
username-as-common-name
key-direction 0
plugin /etc/openvpn/plugins/openvpn-plugin-auth-pam.so login
server 10.11.0.0 255.255.0.0
ifconfig-pool-persist ipp.txt
push "route-method exe"
push "route-delay 2"
keepalive 10 120
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
log udp.log
verb 2
ncp-disable
cipher none
auth none
myOpenVPNconf2

 cat <<'EOF7'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIEqDCCA5CgAwIBAgIUGbtl4Y+R3JSINOgvSvFyNbHUMVAwDQYJKoZIhvcNAQEL
BQAwgYcxCzAJBgNVBAYTAkVVMRQwEgYDVQQIDAtTd2l0emVybGFuZDEPMA0GA1UE
BwwGWnVyaWNoMRYwFAYDVQQKDA1JbnRlcmZhY2UgTExDMQwwCgYDVQQLDANWUE4x
DDAKBgNVBAMMA3ZwczEdMBsGCSqGSIb3DQEJARYObWVAZXhhbXBsZS5uZXQwHhcN
MjIwODE5MDYxMzEyWhcNMzIwODE2MDYxMzEyWjCBhzELMAkGA1UEBhMCRVUxFDAS
BgNVBAgMC1N3aXR6ZXJsYW5kMQ8wDQYDVQQHDAZadXJpY2gxFjAUBgNVBAoMDUlu
dGVyZmFjZSBMTEMxDDAKBgNVBAsMA1ZQTjEMMAoGA1UEAwwDdnBzMR0wGwYJKoZI
hvcNAQkBFg5tZUBleGFtcGxlLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBANDL1bmZKU0FbWHYB21YMsLuFb+pZUJPe/nIY35KQfMwQoSlRMRSNEst
I35GiYpOaBRkXc1M9NHJEx5w1DrcWAxG4mH5QBaqf1LewiQ65jvLLFAI8oCG1UDJ
ObSgSWJzqnmD1NRcT9yTnS7q2L6DMnBhd4PiPkCfXQZJms/Ej63lHoE2riu2peMq
BfyDpVw++s7a4Aend/QIrI8wqjnMd/+7suaOvKzufHRthLTRB9UQCfQ3bjs3Y4WG
5a6ugmIVj/tabxY8hGwD8khJXvjl+bcXCQGCgSQrqtFvI7YgdS3bjv+x1ia8+yXy
Su8ha31ld8ywYoHwQMiQ9ydMwRKHNpMCAwEAAaOCAQgwggEEMB0GA1UdDgQWBBSj
9MJzdzef+o3L9in3wYCYwUGGcDCBxwYDVR0jBIG/MIG8gBSj9MJzdzef+o3L9in3
wYCYwUGGcKGBjaSBijCBhzELMAkGA1UEBhMCRVUxFDASBgNVBAgMC1N3aXR6ZXJs
YW5kMQ8wDQYDVQQHDAZadXJpY2gxFjAUBgNVBAoMDUludGVyZmFjZSBMTEMxDDAK
BgNVBAsMA1ZQTjEMMAoGA1UEAwwDdnBzMR0wGwYJKoZIhvcNAQkBFg5tZUBleGFt
cGxlLm5ldIIUGbtl4Y+R3JSINOgvSvFyNbHUMVAwDAYDVR0TBAUwAwEB/zALBgNV
HQ8EBAMCAQYwDQYJKoZIhvcNAQELBQADggEBAKBF+EV6txoyOjzSfpZm1YyRQwCc
XKbTLEgJyZ+KUeYAZSwtQ9jGaU3oeM3Uvv5qVCmcv7yRjgLMoAeNOmL/ey19kjdz
dvoaZ7uKuQH76s3axeaNGsa5h1WW/jJnOl0JXwNOHAYQo+stX+3nVQEbhYYnqJt0
b2r/LivG+vahcDHQuNJ9cozv8gf7dLlPB2kZviDxR+IT9gppkF5gwecBpLYH0u+E
06Gkh9XdBszowJsOcFgwwAW3XB8iuKvL/DdGHKwL3OP1lfUm8oZ/pRzlRGF+6hoI
2NgiBd8de0Ac+9OJjYspJN6M3uHh77cpIIh1JROvKhh9zXIlG7gkpjgBbJ0=
-----END CERTIFICATE-----
EOF7
 cat <<'EOF9'> /etc/openvpn/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            7a:67:06:24:2e:d6:56:9d:45:92:18:37:c9:4b:bd:9c
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=EU, ST=Switzerland, L=Zurich, O=Interface LLC, OU=VPN, CN=vps/emailAddress=me@example.net
        Validity
            Not Before: Aug 19 06:16:51 2022 GMT
            Not After : Aug  3 06:16:51 2025 GMT
        Subject: C=EU, ST=Switzerland, L=Zurich, O=Interface LLC, OU=VPN, CN=server/emailAddress=me@example.net
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:be:05:73:90:33:ae:29:81:8a:75:79:70:0a:c5:
                    04:74:74:f4:00:8f:bf:9f:e2:2a:7b:d2:e9:2d:1a:
                    1b:f9:76:97:4e:12:1f:87:34:42:94:87:30:80:ae:
                    2b:a8:57:8f:e9:36:34:56:f1:ce:ec:c0:2b:3d:9c:
                    7a:95:c0:49:6d:93:fa:2f:3c:ff:b1:20:59:b5:eb:
                    96:aa:50:41:52:5d:26:99:38:e1:2c:c7:25:74:52:
                    24:60:35:81:58:00:1a:c1:26:33:d6:71:30:9c:3e:
                    4a:0e:f3:9f:df:68:56:de:ef:d3:be:37:2c:45:0f:
                    04:b3:ae:d5:27:ca:56:7c:2d:3a:f7:63:c9:a6:00:
                    d7:50:cd:0c:43:c0:cf:96:19:f7:a2:96:fe:39:40:
                    62:02:3a:ef:05:fc:4e:c2:d6:fc:71:fc:57:64:f3:
                    6f:c0:ad:49:3d:82:54:a0:22:1e:08:5a:ee:77:5b:
                    2a:52:20:03:ce:17:50:42:9d:a8:03:7d:a5:79:5e:
                    01:31:8c:4b:55:43:8d:aa:92:6d:92:98:e2:9e:e1:
                    0b:30:f1:40:e3:0e:5a:16:7c:bb:1c:0d:5c:b7:c7:
                    7a:79:e9:2a:37:09:ff:36:89:7e:51:2c:81:a4:bb:
                    c2:62:ba:0c:64:16:e0:23:dd:7d:f2:51:b6:19:55:
                    9c:23
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints:
                CA:FALSE
            X509v3 Subject Key Identifier:
                B4:3B:59:B2:7B:08:9D:11:A3:69:A2:BF:B3:9A:68:32:3E:CB:2F:1F
            X509v3 Authority Key Identifier:
                keyid:A3:F4:C2:73:77:37:9F:FA:8D:CB:F6:29:F7:C1:80:98:C1:41:86:70
                DirName:/C=EU/ST=Switzerland/L=Zurich/O=Interface LLC/OU=VPN/CN=vps/emailAddress=me@example.net
                serial:19:BB:65:E1:8F:91:DC:94:88:34:E8:2F:4A:F1:72:35:B1:D4:31:50

            X509v3 Extended Key Usage:
                TLS Web Server Authentication
            X509v3 Key Usage:
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name:
                DNS:server
    Signature Algorithm: sha256WithRSAEncryption
         11:44:a2:87:dc:73:08:84:c7:16:52:3e:54:5e:16:84:7d:00:
         8b:4e:53:2a:65:1a:e8:43:6e:cd:36:19:b5:de:05:4a:ff:6b:
         ef:5a:86:a1:18:d7:6a:83:22:e0:b1:b3:4e:eb:ef:1a:26:e2:
         1f:9a:d0:e7:74:42:f7:04:8a:dc:54:72:6e:08:96:4a:59:77:
         70:41:52:9b:ab:2b:9e:79:78:a7:9b:04:70:60:70:b3:39:09:
         d5:59:89:67:bb:d1:47:a0:ee:96:71:2a:be:19:ab:53:c6:09:
         9e:15:ee:14:93:cd:6b:38:d3:ef:8f:f7:12:72:67:19:66:e5:
         fd:0d:21:19:f0:bd:d9:b7:25:0d:a0:a0:ad:3c:8a:a0:15:a9:
         4e:1c:23:25:ef:e3:27:a4:bd:97:2a:9f:86:aa:9d:3e:3c:1a:
         9a:77:85:b3:f9:b1:da:a4:04:0b:a5:cf:00:a3:2c:32:36:1d:
         76:40:6f:fd:e8:ed:c7:25:3f:4e:66:56:58:83:bb:c3:00:0e:
         fc:b0:8a:f9:60:ef:b9:9f:b3:77:a5:a7:8d:1c:69:31:6d:b3:
         66:18:32:63:cf:58:3a:72:ae:f1:6f:d4:33:d5:41:5b:1b:ef:
         7e:aa:12:90:ee:49:26:92:95:16:a6:f4:fe:9d:40:71:a7:be:
         a3:11:04:d2
-----BEGIN CERTIFICATE-----
MIIEzDCCA7SgAwIBAgIQemcGJC7WVp1Fkhg3yUu9nDANBgkqhkiG9w0BAQsFADCB
hzELMAkGA1UEBhMCRVUxFDASBgNVBAgMC1N3aXR6ZXJsYW5kMQ8wDQYDVQQHDAZa
dXJpY2gxFjAUBgNVBAoMDUludGVyZmFjZSBMTEMxDDAKBgNVBAsMA1ZQTjEMMAoG
A1UEAwwDdnBzMR0wGwYJKoZIhvcNAQkBFg5tZUBleGFtcGxlLm5ldDAeFw0yMjA4
MTkwNjE2NTFaFw0yNTA4MDMwNjE2NTFaMIGKMQswCQYDVQQGEwJFVTEUMBIGA1UE
CAwLU3dpdHplcmxhbmQxDzANBgNVBAcMBlp1cmljaDEWMBQGA1UECgwNSW50ZXJm
YWNlIExMQzEMMAoGA1UECwwDVlBOMQ8wDQYDVQQDDAZzZXJ2ZXIxHTAbBgkqhkiG
9w0BCQEWDm1lQGV4YW1wbGUubmV0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEAvgVzkDOuKYGKdXlwCsUEdHT0AI+/n+Iqe9LpLRob+XaXThIfhzRClIcw
gK4rqFeP6TY0VvHO7MArPZx6lcBJbZP6Lzz/sSBZteuWqlBBUl0mmTjhLMcldFIk
YDWBWAAawSYz1nEwnD5KDvOf32hW3u/TvjcsRQ8Es67VJ8pWfC0692PJpgDXUM0M
Q8DPlhn3opb+OUBiAjrvBfxOwtb8cfxXZPNvwK1JPYJUoCIeCFrud1sqUiADzhdQ
Qp2oA32leV4BMYxLVUONqpJtkpjinuELMPFA4w5aFny7HA1ct8d6eekqNwn/Nol+
USyBpLvCYroMZBbgI9198lG2GVWcIwIDAQABo4IBLTCCASkwCQYDVR0TBAIwADAd
BgNVHQ4EFgQUtDtZsnsInRGjaaK/s5poMj7LLx8wgccGA1UdIwSBvzCBvIAUo/TC
c3c3n/qNy/Yp98GAmMFBhnChgY2kgYowgYcxCzAJBgNVBAYTAkVVMRQwEgYDVQQI
DAtTd2l0emVybGFuZDEPMA0GA1UEBwwGWnVyaWNoMRYwFAYDVQQKDA1JbnRlcmZh
Y2UgTExDMQwwCgYDVQQLDANWUE4xDDAKBgNVBAMMA3ZwczEdMBsGCSqGSIb3DQEJ
ARYObWVAZXhhbXBsZS5uZXSCFBm7ZeGPkdyUiDToL0rxcjWx1DFQMBMGA1UdJQQM
MAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDARBgNVHREECjAIggZzZXJ2ZXIwDQYJ
KoZIhvcNAQELBQADggEBABFEoofccwiExxZSPlReFoR9AItOUyplGuhDbs02GbXe
BUr/a+9ahqEY12qDIuCxs07r7xom4h+a0Od0QvcEitxUcm4IlkpZd3BBUpurK555
eKebBHBgcLM5CdVZiWe70Ueg7pZxKr4Zq1PGCZ4V7hSTzWs40++P9xJyZxlm5f0N
IRnwvdm3JQ2goK08iqAVqU4cIyXv4yekvZcqn4aqnT48Gpp3hbP5sdqkBAulzwCj
LDI2HXZAb/3o7cclP05mVliDu8MADvywivlg77mfs3elp40caTFts2YYMmPPWDpy
rvFv1DPVQVsb736qEpDuSSaSlRam9P6dQHGnvqMRBNI=
-----END CERTIFICATE-----
EOF9
 cat <<'EOF10'> /etc/openvpn/server.key
-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC+BXOQM64pgYp1
eXAKxQR0dPQAj7+f4ip70uktGhv5dpdOEh+HNEKUhzCAriuoV4/pNjRW8c7swCs9
nHqVwEltk/ovPP+xIFm165aqUEFSXSaZOOEsxyV0UiRgNYFYABrBJjPWcTCcPkoO
85/faFbe79O+NyxFDwSzrtUnylZ8LTr3Y8mmANdQzQxDwM+WGfeilv45QGICOu8F
/E7C1vxx/Fdk82/ArUk9glSgIh4IWu53WypSIAPOF1BCnagDfaV5XgExjEtVQ42q
km2SmOKe4Qsw8UDjDloWfLscDVy3x3p56So3Cf82iX5RLIGku8JiugxkFuAj3X3y
UbYZVZwjAgMBAAECggEADuW6g6mpk9N2GXOl1xJPIRoyLwEWEuDWV9LXORP88Xfc
sOA23JC6T46xvMTq403KGIyJWe+nO2Rtf20PJ0Jl/1NEoAN2QFq67cpEi6GzHVP0
PLr63FnYk+AEvg4zz8RiVJY8JinFl9pCUB3FgOxbMys2PIlyzQ86XSPtzirM0PtP
+LmPFxZ3+4OWDDW0dXjzfCSzbrYoWQXZ6hxhUvlRCk8fH/hEOzI3WMsuIm6cSzoF
UcYz7nX8RoCApq+91bUIG0/bJipbApAG/1PBTS1uBHM7qFh8RYfXgB9MyH/VNrau
jfDeC+2TWKVq70tO7OnTL9qZDaa4kYS2LKe6LZODcQKBgQD4wDamr2ZmImaCEQde
7zBR6WArKSHPP0Riq+PrhUjEndHfoHsKn1eOtaSHQgbi33y5zpNlFopC84eZdn1t
94vh6S8H+vjOl9M6A7YufeFS2k10Men/l9ZSbHvgzYvmsnXjHETFfdyNUVXJTwMc
egHCNnQ7Itf2yGLpuRiINFReNQKBgQDDjxc5DaTzn5/Cta0mWrXIJdKym0AzvJNZ
odQOXwGDFTqjqJlE+FtILqdY5X4/J1uJq7GpskWZKz0ljG4gdtNHx/05r3nRmIRH
U9COWwiEae7Dj4NjRggMDOpi77VLC2cNa2wxELBSMhfs+eDwXc84lzUhdd88pwyU
wNn46ma79wKBgQCpvAbOoFrgEFMgJ1x/M/klu3gqm0t9ri8MoTvJps3rk8D0tf2f
VvEY6OsWfEBUqKjj5IiA7utzGdeKKOcXlVW21jWIXYFO/xxbttKmULDipyE4yyJf
jIzq+ylgUQFIbrewO8bVd7d6GmjOD4MQ+FOg4SVYgMMamsubrfiGYCa9jQKBgQCo
NIGzDytcaWYPIhkmrktBNlc+TQ8x8PeE1w8AtXMlfrMLZc8/ZaeONKK4cdzfEUlI
5ydPYQlAL9LOYzWuMsaULU5/uZE8WMUeXNc8OszeqAc4qk5Gq0vsoYdRRgFX5Rzk
jAtpQIOIj5HIwT1bQjUk5dpLR4mWL9FAeYiC84seDQKBgQDeSELIkxqeh0f2t9bn
WnJMyXmwTBNkvOWD4Xf8VnM5ASPAGTNue+M13Uy57uWRd0pqHyD2ytGnlN0cWDtH
YhYvT64nUeZmELfvIhBO2WDUf4flb9MGC5RjoA011jvZrd92GsfOheI1jCvHX4Aj
0IofqxFQUpHo5zR5l1tr22WAtg==
-----END PRIVATE KEY-----
EOF10
 cat <<'EOF13'> /etc/openvpn/dh2048.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAl6ry/8Cn5C0e+RghmVOyMhk0RyBgmkxPSsnBIW93F5RfFhcoJD52
ZI4URssSbbvdtnp0pqvd33Z4tWkKgAUR9oKNDplDfJRcQSMpxROTwC6mtl0Ein57
XYti6NMWlQuZ3TJpBgCB7oHojwpL/ijvLAfXoaTunxUpVBH8qFgHYK94cFOe5eYT
2cb0XApuJ7bvI6MzrHknx6asxQ8G+Dcj/YVo3pYQqXiZXaNRqL+RAi4mD5rXPJa3
GK2NCMKn/1P2F52qDlDgvVSh4t0dmS1uDcLpmeXAFMuDqiLBVIKQQPG9CGz9tJ/b
4T5LrfRaNd5mwCq0UaKKskkjp35Vs18uIwIBAg==
-----END DH PARAMETERS-----

EOF13

 # Getting all dns inside resolv.conf then use as Default DNS for our openvpn server
 grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_tcp.conf
done

 # Creating a New update message in server.conf
 cat <<'NUovpn' > /etc/openvpn/server.conf
 # New Update are now released, OpenVPN Server
 # are now running both TCP and UDP Protocol. (Both are only running on IPv4)
 # But our native server.conf are now removed and divided
 # Into two different configs base on their Protocols:
 #  * OpenVPN TCP (located at /etc/openvpn/server_tcp.conf
 #  * OpenVPN UDP (located at /etc/openvpn/server_udp.conf
 # 
 # Also other logging files like
 # status logs and server logs
 # are moved into new different file names:
 #  * OpenVPN TCP Server logs (/etc/openvpn/tcp.log)
 #  * OpenVPN UDP Server logs (/etc/openvpn/udp.log)
 #  * OpenVPN TCP Status logs (/etc/openvpn/tcp_stats.log)
 #  * OpenVPN UDP Status logs (/etc/openvpn/udp_stats.log)
 #
 # Server ports are configured base on env vars
 # executed/raised from this script (OpenVPN_TCP_Port/OpenVPN_UDP_Port)
 #
 # Enjoy the new update
 # Script Updated by PR Aiman
NUovpn

 # setting openvpn server port
 sed -i "s|OVPNTCP|$OpenVPN_TCP_Port|g" /etc/openvpn/server_tcp.conf
 sed -i "s|OVPNUDP|$OpenVPN_UDP_Port|g" /etc/openvpn/server_udp.conf
 
 # Getting some OpenVPN plugins for unix authentication
 cd
 wget https://github.com/malintes/vpn/tree/main/Files/Plugins/plugin.tgz
 tar -xzvf /root/plugin.tgz -C /etc/openvpn/
 rm -f plugin.tgz
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.conf
 sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.d/*.conf
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf
 sysctl --system &> /dev/null

 # Iptables Rule for OpenVPN server
 cat <<'EOFipt' > /etc/openvpn/openvpn.bash
#!/bin/bash
PUBLIC_INET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
IPCIDR='10.10.0.0/16'
IPCIDR2='10.11.0.0/16'
iptables -I FORWARD -s $IPCIDR -j ACCEPT
iptables -I FORWARD -s $IPCIDR2 -j ACCEPT
iptables -t nat -A POSTROUTING -o $PUBLIC_INET -j MASQUERADE
iptables -t nat -A POSTROUTING -s $IPCIDR -o $PUBLIC_INET -j MASQUERADE
iptables -t nat -A POSTROUTING -s $IPCIDR2 -o $PUBLIC_INET -j MASQUERADE
EOFipt
 chmod +x /etc/openvpn/openvpn.bash
 bash /etc/openvpn/openvpn.bash

 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl enable openvpn@server_tcp
 systemctl start openvpn@server_udp
 systemctl enable openvpn@server_udp
}
function InsProxy(){

 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'privoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
privoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # Removing Duplicate Squid config
 rm -rf /etc/squid/squid.con*
 
 # Creating Squid server config using cat eof tricks
 cat <<'mySquid' > /etc/squid/squid.conf
# My Squid Proxy Server Config
acl VPN dst IP-ADDRESS/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:Squid_Port1
http_port 0.0.0.0:Squid_Port2
http_port 0.0.0.0:Squid_Port3
### Allow Headers
request_header_access Allow allow all 
request_header_access Authorization allow all 
request_header_access WWW-Authenticate allow all 
request_header_access Proxy-Authorization allow all 
request_header_access Proxy-Authenticate allow all 
request_header_access Cache-Control allow all 
request_header_access Content-Encoding allow all 
request_header_access Content-Length allow all 
request_header_access Content-Type allow all 
request_header_access Date allow all 
request_header_access Expires allow all 
request_header_access Host allow all 
request_header_access If-Modified-Since allow all 
request_header_access Last-Modified allow all 
request_header_access Location allow all 
request_header_access Pragma allow all 
request_header_access Accept allow all 
request_header_access Accept-Charset allow all 
request_header_access Accept-Encoding allow all 
request_header_access Accept-Language allow all 
request_header_access Content-Language allow all 
request_header_access Mime-Version allow all 
request_header_access Retry-After allow all 
request_header_access Title allow all 
request_header_access Connection allow all 
request_header_access Proxy-Connection allow all 
request_header_access User-Agent allow all 
request_header_access Cookie allow all 
request_header_access All deny all
### HTTP Anonymizer Paranoid
reply_header_access Allow allow all 
reply_header_access Authorization allow all 
reply_header_access WWW-Authenticate allow all 
reply_header_access Proxy-Authorization allow all 
reply_header_access Proxy-Authenticate allow all 
reply_header_access Cache-Control allow all 
reply_header_access Content-Encoding allow all 
reply_header_access Content-Length allow all 
reply_header_access Content-Type allow all 
reply_header_access Date allow all 
reply_header_access Expires allow all 
reply_header_access Host allow all 
reply_header_access If-Modified-Since allow all 
reply_header_access Last-Modified allow all 
reply_header_access Location allow all 
reply_header_access Pragma allow all 
reply_header_access Accept allow all 
reply_header_access Accept-Charset allow all 
reply_header_access Accept-Encoding allow all 
reply_header_access Accept-Language allow all 
reply_header_access Content-Language allow all 
reply_header_access Mime-Version allow all 
reply_header_access Retry-After allow all 
reply_header_access Title allow all 
reply_header_access Connection allow all 
reply_header_access Proxy-Connection allow all 
reply_header_access User-Agent allow all 
reply_header_access Cookie allow all 
reply_header_access All deny all
### CoreDump
coredump_dir /var/spool/squid
dns_nameservers 8.8.8.8 8.8.4.4
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname PR Aiman
mySquid

 # Setting machine's IP Address inside of our Squid config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/squid/squid.conf
 
 # Setting squid ports
 sed -i "s|Squid_Port1|$Squid_Port1|g" /etc/squid/squid.conf
 sed -i "s|Squid_Port2|$Squid_Port2|g" /etc/squid/squid.conf
 sed -i "s|Squid_Port3|$Squid_Port3|g" /etc/squid/squid.conf

 # Starting Proxy server
 echo -e "\e[0;37m Restarting proxy server..."
 systemctl restart squid
}

function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/PR-Aiman-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/PR-Aiman-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

 # Now creating all of our OpenVPN Configs 

cat <<EOF16> /var/www/openvpn/client-tcp.ovpn
# Malintes VPN
client
dev tun
proto tcp
setenv FRIENDLY_NAME "Revolution Become True"
remote $IPADDR $OpenVPN_TCP_Port
remote-cert-tls server
connect-retry infinite
resolv-retry infinite
nobind
persist-key
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
comp-lzo
redirect-gateway def1
setenv CLIENT_CERT 0
reneg-sec 0
verb 1
http-proxy xxxxxxxxx $Squid_Port1
http-proxy-option VERSION 1.1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER Host bug.com
http-proxy-option CUSTOM-HEADER X-Forward-Host bug.com
http-proxy-option CUSTOM-HEADER X-Forwarded-For bug.com
http-proxy-option CUSTOM-HEADER Referrer bug.com
dhcp-option DNS 8.8.8.8
dhcp-option DNS 8.8.4.4

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF16

cat <<EOF16> /var/www/openvpn/client-tcp-privoxy.ovpn
# VPN Malintes
client
dev tun
proto tcp
setenv FRIENDLY_NAME "Revolution Become True"
remote $IPADDR $OpenVPN_TCP_Port
remote-cert-tls server
connect-retry infinite
resolv-retry infinite
nobind
persist-key
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
comp-lzo
redirect-gateway def1
setenv CLIENT_CERT 0
reneg-sec 0
verb 1
http-proxy xxxxxxxxx $Privoxy_Port1
http-proxy-option VERSION 1.1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER Host bug.com
http-proxy-option CUSTOM-HEADER X-Forward-Host bug.com
http-proxy-option CUSTOM-HEADER X-Forwarded-For bug.com
http-proxy-option CUSTOM-HEADER Referrer bug.com
dhcp-option DNS 8.8.8.8
dhcp-option DNS 8.8.4.4

<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF16

cat <<EOF162> /var/www/openvpn/client-udp.ovpn
# Malinte VPN
client
dev tun
proto udp
setenv FRIENDLY_NAME "Revolution Become True"
remote $IPADDR $OpenVPN_UDP_Port
remote-cert-tls server
resolv-retry infinite
float
fast-io
nobind
persist-key
persist-remote-ip
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
comp-lzo
redirect-gateway def1
setenv CLIENT_CERT 0
reneg-sec 0
verb 1
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF162

 # Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">

<!-- Simple OVPN Download site by Malintes -->

<head><meta charset="utf-8" /><title>Malintes OVPN Config Download</title>
<meta name="description" content="MyScriptName Server" />
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" />
<meta name="theme-color" content="#000000" /><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet"></head>
<body>
<div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;">
<div class="col-md"><div class="view"><img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" class="card-img-top"><div class="mask rgba-white-slight"></div>
</div>
<div class="card"><div class="card-body"><h5 class="card-title">Config List</h5><br /><ul class="list-group"><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>VPN config <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br />
<small> Config OVPN Protocol UDP</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/client-udp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>VPN config <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br />
<small> Config OVPN Protocol TCP+PROXY</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/client-tcp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>VPN config <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br />
<small> Config OVPN Protocol TCP+PRIVOXY</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/client-tcp-privoxy.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li></ul></div></div></div></div>
</body></html>
mySiteOvpn


 # Setting template's correct name,IP address and nginx Port
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn
 zip -qq -r configs.zip *.ovpn
 cd
}

function ip_address(){
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} 
IPADDR="$(ip_address)"

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 echo "10 0 * * * root clear-log && reboot" >> /etc/crontab

 # Creating directory for startup script
 rm -rf /etc/Malintes
 mkdir -p /etc/Malintes
 chmod -R 755 /etc/Malintes
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/Malintes/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null
exit 0
EOFSH
 chmod +x /etc/Malintes/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/Malintes/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 cat <<'FordServ' > /etc/systemd/system/Malintes.service
[Unit]
Description=Malintes Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/Malintes/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
FordServ
 chmod +x /etc/systemd/system/Malintes.service
 systemctl daemon-reload
 systemctl start Malintes
 systemctl enable Malintes &> /dev/null
 systemctl enable fail2ban &> /dev/null
 systemctl start fail2ban &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}
 
 #Create Admin
 useradd -m Malinteska
 echo "malinteska:795243" | chpasswd

function ConfMenu(){
echo -e "\e[0;37m  Creating Menu scripts.."

# Download Script
cd /usr/local/sbin/
https://github.com/malintes/vpn/tree/main/Files/Menu
wget -O bench-network "https://github.com/malintes/vpn/tree/main/Files/Menu/bench-network"
wget -O connections "https://github.com/malintes/vpn/tree/main/Files/Menu/connections"
wget -O create "https://github.com/malintes/vpn/tree/main/Files/Menu/create"
wget -O create_trial "https://github.com/malintes/vpn/tree/main/Files/Menu/create_trial"
wget -O delete_expired "https://github.com/malintes/vpn/tree/main/Files/Menu/delete_expired"
wget -O edit_dropbear "https://github.com/malintes/vpn/tree/main/Files/Menu/edit_dropbear"
wget -O edit_openssh "https://github.com/malintes/vpn/tree/main/Files/Menu/edit_openssh"
wget -O edit_openvpn "https://github.com/malintes/vpn/tree/main/Files/Menu/edit_openvpn"
wget -O edit_ports "https://github.com/malintes/vpn/tree/main/Files/Menu/edit_ports"
wget -O edit_squid3 "https://github.com/malintes/vpn/tree/main/Files/Menu/edit_squid3"
wget -O edit_stunnel4 "https://github.com/malintes/vpn/tree/main/Files/Menu/edit_stunnel4"
wget -O menu "https://github.com/malintes/vpn/tree/main/Files/Menu/menu"
wget -O options "https://github.com/malintes/vpn/tree/main/Files/Menu/options"
wget -O ram "https://github.com/malintes/vpn/tree/main/Files/Menu/ram"
wget -O reboot_sys "https://github.com/malintes/vpn/tree/main/Files/Menu/reboot_sys"
wget -O reboot_sys_auto "https://github.com/malintes/vpn/tree/main/Files/Menu/reboot_sys_auto"
wget -O renew_account "https://github.com/malintes/vpn/tree/main/Files/Menu/renew_account"
wget -O restart_services "https://github.com/malintes/vpn/tree/main/Files/Menu/restart_services"
wget -O set_multilogin_autokill "https://github.com/malintes/vpn/tree/main/Files/Menu/set_multilogin_autokill"
wget -O set_multilogin_autokill_lib "https://github.com/malintes/vpn/tree/main/Files/Menu/set_multilogin_autokill_lib"
wget -O show_ports "https://github.com/malintes/vpn/tree/main/Files/Menu/show_ports"
wget -O user_delete "https://github.com/malintes/vpn/tree/main/Files/Menu/user_delete"
wget -O user_list "https://github.com/malintes/vpn/tree/main/Files/Menu/user_list"
wget -O change_timezone "https://github.com/malintes/vpn/tree/main/Files/Menu/change_timezone"
wget -O speedtest "https://github.com/malintes/vpn/tree/main/Files/Menu/speedtest_cli.py"
chmod +x bench-network
chmod +x connections
chmod +x create
chmod +x create_trial
chmod +x delete_expired
chmod +x edit_dropbear
chmod +x edit_openssh
chmod +x edit_openvpn
chmod +x edit_ports
chmod +x edit_squid3
chmod +x edit_stunnel4
chmod +x menu
chmod +x options
chmod +x ram
chmod +x reboot_sys
chmod +x reboot_sys_auto
chmod +x renew_account
chmod +x restart_services
chmod +x set_multilogin_autokill
chmod +x set_multilogin_autokill_lib
chmod +x show_ports
chmod +x user_delete
chmod +x user_list
chmod +x change_timezone
chmod +x speedtest
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|g' ./*
sed -i 's|http_port|g' ./*
cd ~
}

function ScriptMessage(){
 echo -e ""
 echo -e "\e[0;37m $MyScriptName VPS Installer Version 3.0 Will Begin"
 echo -e ""
 sleep 0.5
 echo -e "\e[0;37m Report Bugs https://t.me/PR_Aiman"
 echo -e ""
 sleep 0.5
 echo -e "\e[0;37m Script installer will be begin now..."
 echo -e ""
 sleep 0.5
}

function InstBadVPN(){
 # Pull BadVPN Binary 64bit or 32bit
if [ "$(getconf LONG_BIT)" == "64" ]; then
 wget -O /usr/bin/badvpn-udpgw "https://github.com/malintes/vpn/tree/main/Files/Plugins/badvpn-udpgw64"
else
 wget -O /usr/bin/badvpn-udpgw "https://github.com/malintes/vpn/tree/main/Files/Plugins/badvpn-udpgw"
fi
 # Set BadVPN to Start on Boot via .profile
 sed -i '$ i\screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300' /root/.profile
 # Change Permission to make it Executable
 chmod +x /usr/bin/badvpn-udpgw
 # Start BadVPN via Screen
 screen -AmdS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300
}


#############################################
#############################################
########## Installation Process##############
#############################################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################################
#############################################

 # First thing to do is check if this machine is Debian
 source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 ScriptMessage
 echo -e "[\e[1;31mError This script is for Debian or Ubuntu only, exiting..." 
 exit 1
fi

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError This script must be run as root, exiting..."
 exit 1
fi

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31mError\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 InstUpdates
 
 # Configure OpenSSH and Dropbear
 echo -e "\e[0;37m Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "\e[0;37m Configuring stunnel..."
 InsStunnel
 
 # Configure BadVPN UDPGW
 echo -e "\e[0;37m Configuring BadVPN UDPGW..."
 InstBadVPN
 
 # Configure Webmin
 echo -e "\e[0;37m Configuring webmin..."
 InstWebmin
 
 # Configure Squid
 echo -e "\e[0;37m Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "\e[0;37m Configuring OpenVPN..."
 InsOpenVPN
 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 ## DNS maker plugin for Revolution Become True users(for vps script usage only)
 wget -qO dnsmaker "https://github.com/Bonveio/BonvScripts/blob/master/DNSMaster/debian-vps"
 chmod +x dnsmaker
 ./dnsmaker
 rm -rf dnsmaker
 sed -i "s|http-proxy $IPADDR|http-proxy $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/client-tcp.ovpn
 sed -i "s|http-proxy $IPADDR|http-proxy $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/client-tcp-privoxy.ovpn
 sed -i "s|remote $IPADDR|remote $(cat /tmp/abonv_mydns)|g" /var/www/openvpn/client-udp.ovpn
 curl -4sSL "$(cat /tmp/abonv_mydns_domain)" &> /dev/null
 mv /tmp/abonv_mydns /etc/bonveio/my_domain_name
 mv /tmp/abonv_mydns_id /etc/bonveio/my_domain_id
 rm -rf /tmp/abonv*

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 clear
 cd ~
 
# Install DDOS Deflate
cd
apt-get -y install dnsutils dsniff
wget "https://github.com/malintes/vpn/tree/main/Files/Others/ddos-deflate-master.zip"
unzip ddos-deflate-master.zip
cd ddos-deflate-master
./install.sh
cd
rm -rf ddos-deflate-master.zip

# Blocked Torrent
# iptables -A FORWARD -m string --string "get_peers" --algo bm -j DROP
# iptables -A FORWARD -m string --string "announce_peer" --algo bm -j DROP
# iptables -A FORWARD -m string --string "find_node" --algo bm -j DROP
# iptables -A FORWARD -m string --algo bm --string "BitTorrent" -j DROP
# iptables -A FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP
# iptables -A FORWARD -m string --algo bm --string "peer_id=" -j DROP
# iptables -A FORWARD -m string --algo bm --string ".torrent" -j DROP
# iptables -A FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP
# iptables -A FORWARD -m string --algo bm --string "torrent" -j DROP
# iptables -A FORWARD -m string --algo bm --string "announce" -j DROP
# iptables -A FORWARD -m string --algo bm --string "info_hash" -j DROP
# iptables-save > /etc/iptables.up.rules
# iptables-restore -t < /etc/iptables.up.rules
# netfilter-persistent save
# netfilter-persistent reload
 
 # Running screenfetch
 wget -O /usr/bin/screenfetch "https://github.com/malintes/vpn/tree/main/Files//Plugins/screenfetch"
 chmod +x /usr/bin/screenfetch
 echo "/bin/bash /etc/openvpn/openvpn.bash" >> .profile
 echo "clear" >> .profile
 echo "screenfetch" >> .profile

 #Swap Ram For Free Space
 wget https://github.com/malintes/vpn/tree/main/Files/Menu/swapkvm && chmod +x swapkvm && ./swapkvm
 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
echo ""
echo -e "\e[0;37m Installation has been completed!!"
echo "--------------------------------------------------------------------------------"
echo -e "\e[0;37m                             Debian Premium Script                               "
echo -e "\e[0;37m                                   -Malintes-                                    "
echo "--------------------------------------------------------------------------------"
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m Server Information"  | tee -a log-install.txt
echo -e "\e[0;37m    - Timezone    : Europe/Zurich "  | tee -a log-install.txt
echo -e "\e[0;37m    - Fail2Ban    : [ON]"  | tee -a log-install.txt
echo -e "\e[0;37m    - IPtables    : [ON]"  | tee -a log-install.txt
echo -e "\e[0;37m    - Auto-Reboot : [ON]"  | tee -a log-install.txt
echo -e "\e[0;37m    - IPv6        : [OFF]"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m Application & Port Information"  | tee -a log-install.txt
echo -e "\e[0;37m    - OpenVPN		: TCP $OpenVPN_TCP_Port UDP $OpenVPN_UDP_Port "  | tee -a log-install.txt
echo -e "\e[0;37m    - OpenSSH		: $SSH_Port1, $SSH_Port2 "  | tee -a log-install.txt
echo -e "\e[0;37m    - Dropbear		: $Dropbear_Port1, $Dropbear_Port2"  | tee -a log-install.txt
echo -e "\e[0;37m    - Stunnel/SSL 	: $Stunnel_Port1, $Stunnel_Port2"  | tee -a log-install.txt
echo -e "\e[0;37m    - Squid Proxy	: $Squid_Port1 , $Squid_Port2 (limit to IP Server)"  | tee -a log-install.txt
echo -e "\e[0;37m    - Squid ELITE	: $Squid_Port3 (limit to IP Server)"  | tee -a log-install.txt
echo -e "\e[0;37m    - Privoxy		: $Privoxy_Port1 , $Privoxy_Port2 (limit to IP Server)"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m Premium Script Information"  | tee -a log-install.txt
echo -e "\e[0;37m    To display list of commands: menu"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m Important Information"  | tee -a log-install.txt
echo -e "\e[0;37m    - Installation Log        : cat /root/log-install.txt"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m    - Webmin                  : http://$IPADDR:10000/"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m OpenVPN Configs Download"  | tee -a log-install.txt
echo -e "\e[0;37m    - Download Link           : http://$IPADDR:8580/configs.zip"  | tee -a log-install.txt
echo -e "\e[0;37m    - Malintes"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo -e "\e[0;37m This script is under project of  https://github.com/malintes/vpn"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "--------------------------------------------------------------------------------"

# Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog
echo ""
echo -e "\e[0;37m  Server will be reboot In 5 Sec"
sleep 5
rm -f setup*
reboot
exit 1
